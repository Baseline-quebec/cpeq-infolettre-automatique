# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: "Terraform: Validate, Plan, Deploy"

on:
  push:
    branches:
      - main
    paths:
      - "iac/**"
  pull_request_target:
    branches:
      - main
    paths:
      - "iac/**"
  workflow_dispatch:

env:
  IS_MAIN: ${{ github.head_ref == 'refs/head/main' }}
  ARM_CLIENT_ID: ${{ secrets.TERRAFORM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.TERRAFORM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.TERRAFORM_SUBSCRIPTION_ID }}

jobs:
  terraform:
    environment: dev
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: iac
    permissions:
      pull-requests: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.TERRAFORM_CLIENT_ID }}
          tenant-id: ${{ secrets.TERRAFORM_TENANT_ID }}
          subscription-id: ${{ secrets.TERRAFORM_SUBSCRIPTION_ID }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.0"
          terraform_wrapper: false

      - name: Terraform Format
        if: ${{ !env.IS_MAIN }}
        id: fmt
        run: terraform fmt -check

      - run: terraform init

      - run: terraform validate -no-color
        if: ${{ !env.IS_MAIN }}

      - id: plan
        run: terraform plan -no-color -var-file=variables/${{ vars.ENVIRONMENT }}.tfvars

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan.outputs.payload).data.relationships.plan.data.id }}

      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
               \`\`\`
               Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
               \`\`\`
               [Terraform Cloud Plan](${{ steps.plan.outputs.run_link }})
               `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - run: ${{ fromJSON(steps.plan.outputs.payload).data.relationships.plan.data.id }} | terraform apply -auto-approve -no-color -lock-timeout=30s
