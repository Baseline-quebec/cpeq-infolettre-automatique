# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: "Terraform: Validate, Plan, Deploy"

on:
  push:
    branches:
      - main
    paths:
      - "iac/**"
  pull_request:
    branches:
      - main
    paths:
      - "iac/**"
  workflow_dispatch:

env:
  IS_MAIN: ${{ github.ref == 'refs/heads/main' }}

jobs:
  terraform:
    environment: dev
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: iac
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            iac

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.0"
          terraform_wrapper: false

      - id: fmt
        name: Check Terraform formatting
        if: ! env.IS_MAIN
        run: terraform fmt -check

      - id: init
        name: Initialize Terraform
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.TERRAFORM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.TERRAFORM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.TERRAFORM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.TERRAFORM_SUBSCRIPTION_ID }}

      - id: validate
        name: Validate Terraform config
        if: ! env.IS_MAIN
        env:
          ARM_CLIENT_ID: ${{ secrets.TERRAFORM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.TERRAFORM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.TERRAFORM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.TERRAFORM_SUBSCRIPTION_ID }}
        run: |
          terraform validate -no-color 2>&1 >> output.log
          result_code=${PIPESTATUS[0]}

          {
            echo 'stdout<<EOF'
            cat output.log
            echo EOF
          } >> "$GITHUB_OUTPUT"

          exit $result_code

      - id: plan
        name: Terraform Plan
        env:
          ARM_CLIENT_ID: ${{ secrets.TERRAFORM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.TERRAFORM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.TERRAFORM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.TERRAFORM_SUBSCRIPTION_ID }}
        run: |
          terraform plan -no-color -var-file=variables/${{ vars.ENVIRONMENT }}.tfvars -out plan.tfplan 2>&1 >> output.log
          result_code=${PIPESTATUS[0]}

          {
            echo 'stdout<<EOF'
            cat output.log
            echo EOF
          } >> "$GITHUB_OUTPUT"

          exit $result_code

      - uses: actions/github-script@v7
        name: Update PR Comment
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - run: terraform apply -auto-approve -no-color -lock-timeout=30s plan.tfplan
        name: Apply Terraform plan
        env:
          ARM_CLIENT_ID: ${{ secrets.TERRAFORM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.TERRAFORM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.TERRAFORM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.TERRAFORM_SUBSCRIPTION_ID }}
