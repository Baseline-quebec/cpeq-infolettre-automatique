[build-system]  # https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]  # https://python-poetry.org/docs/pyproject/
name = "cpeq-infolettre-automatique"
version = "0.0.0"
description = "Génération automatique d'infolettres"
authors = ["Jean-Samuel Leboeuf <jean-samuel.leboeuf@baseline.quebec>"]
readme = "README.md"
repository = "https://github.com/Baseline-quebec/cpeq-infolettre-automatique"

[tool.commitizen]  # https://commitizen-tools.github.io/commitizen/config/
bump_message = "bump(release): v$current_version → v$new_version"
tag_format = "v$version"
update_changelog_on_bump = true
version_provider = "poetry"

[tool.poetry.dependencies]  # https://python-poetry.org/docs/dependency-specification/
coloredlogs = ">=15.0.1"
fastapi = { extras = ["all"], version = ">=0.92.0" }
gunicorn = ">=21.2.0"
poethepoet = ">=0.25.0"
python = ">=3.12,<4.0"
uvicorn = { extras = ["standard"], version = ">=0.29.0" }
python-decouple = "^3.8"
openai = "^1.23.2"
numpy = "^1.26.4"
tiktoken = "^0.6.0"

[tool.poetry.group.test.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
commitizen = ">=3.21.3"
coverage = { extras = ["toml"], version = ">=7.4.4" }
mypy = ">=1.9.0"
pre-commit = ">=3.7.0"
pytest = ">=8.1.1"
pytest-mock = ">=3.14.0"
pytest-xdist = ">=3.5.0"
ruff = ">=0.3.5"
safety = ">=3.1.0"
shellcheck-py = ">=0.10.0.1"
typeguard = ">=4.2.1"

[tool.poetry.group.dev.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
cruft = ">=2.15.0"
ipykernel = ">=6.29.4"
ipywidgets = ">=8.1.2"
pdoc = ">=14.4.0"

[tool.coverage.report]  # https://coverage.readthedocs.io/en/latest/config.html#report
fail_under = 30
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.run]  # https://coverage.readthedocs.io/en/latest/config.html#run
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["src"]

[tool.coverage.html]  # https://coverage.readthedocs.io/en/latest/cmd.html#html-reporting-coverage-html
directory = "reports/htmlcov"

[tool.coverage.xml]  # https://coverage.readthedocs.io/en/latest/cmd.html#cmd-xml
directory = "reports/coverage.xml"

[tool.mypy]  # https://mypy.readthedocs.io/en/latest/config_file.html
junit_xml = "reports/mypy.xml"
plugins = "pydantic.mypy"
strict = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true

[tool.pydantic-mypy]  # https://pydantic-docs.helpmanual.io/mypy_plugin/#configuring-the-plugin
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]  # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
addopts = "--color=yes --doctest-modules --exitfirst --failed-first --strict-config --strict-markers --typeguard-packages=cpeq_infolettre_automatique --verbosity=2 --junitxml=reports/pytest.xml"
filterwarnings = ["error", "ignore::DeprecationWarning"]
testpaths = ["src", "tests"]
xfail_strict = true

[tool.ruff]  # https://github.com/charliermarsh/ruff
fix = true
line-length = 99
src = ["src", "tests"]
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN002", # Missing type annotation for args. Complicates the code too much with the current annotation system.
    "ANN003", # Missing type annotation for kwargs. Complicates the code too much with the current annotation system.
    "ANN101", # Missing type annotation for self in method. Useless info as it's always the same and clutters the code.
    "ANN102", # Missing type annotation for cls in classmethod. Useless info as it's always the same and clutters the code.
    "COM812", # Missing trailing comma in a single-line list. Already handled by ruff formater
    "CPY001", # Copyright notice missing. Not always needed.
    "E501", # Line too long. Already handled by ruff formater
    "E731", # Do not assign a lambda expression. Do not agree with this rule, it improves readability as it is self-documenting the lambda function.
    "PD901", # Do not use the variable name "df". This is a common name for dataframes and is not a problem.
    "RET504", # Unnecessary assign before return. This is not bad, it helps debugging.
    "S311", # Standard pseudo-random generators are not suitable for security/cryptographic purposes. Our use case is not security/cryptographic.
    "TRY003", # Raise exception with vanilla arguments. Creating exception classes should be done only when really needed.
    "W505", # Doc line too long. Editor autowraps doc, and it's too much work to fix it.
    "ISC001", # single-line-implicit-string-concatenation, `z = "The quick " "brown fox."` becomes `z = "The quick brown fox."` This rule may cause conflicts when used with the formatter.
]
unfixable = ["ERA001", "F401", "F841", "T201", "T203"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "INP001", "D100", "D101", "SLF"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.lint.pycodestyle]
max-doc-length = 99

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 6

[tool.poe.tasks]  # https://github.com/nat-n/poethepoet

  [tool.poe.tasks.api]
  help = "Serve a REST API"
  shell = """
    if [ $dev ]
    then {
      uvicorn \
        --host $host \
        --port $port \
        --reload \
        cpeq_infolettre_automatique.api:app
    } else {
      gunicorn \
        --access-logfile - \
        --bind $host:$port \
        --graceful-timeout 10 \
        --keep-alive 10 \
        --log-file - \
        --timeout 30 \
        --worker-class uvicorn.workers.UvicornWorker \
        --worker-tmp-dir /dev/shm \
        --workers 2 \
        cpeq_infolettre_automatique.api:app
    } fi
    """

    [[tool.poe.tasks.api.args]]
    help = "Bind socket to this host (default: 0.0.0.0)"
    name = "host"
    options = ["--host"]
    default = "0.0.0.0"

    [[tool.poe.tasks.api.args]]
    help = "Bind socket to this port (default: 8000)"
    name = "port"
    options = ["--port"]
    default = "8000"

    [[tool.poe.tasks.api.args]]
    help = "Enable development mode"
    type = "boolean"
    name = "dev"
    options = ["--dev"]

  [tool.poe.tasks.docs]
  help = "Generate this app's docs"
  cmd = """
    pdoc
      --docformat $docformat
      --output-directory $outputdirectory
      cpeq_infolettre_automatique
    """

    [[tool.poe.tasks.docs.args]]
    help = "The docstring style (default: google)"
    name = "docformat"
    options = ["--docformat"]
    default = "google"

    [[tool.poe.tasks.docs.args]]
    help = "The output directory (default: docs)"
    name = "outputdirectory"
    options = ["--output-directory"]
    default = "docs"

  [tool.poe.tasks.lint]
  help = "Lint this app"

    [[tool.poe.tasks.lint.sequence]]
    cmd = """
      pre-commit run
        --all-files
        --color always
      """

    [[tool.poe.tasks.lint.sequence]]
    shell = "safety check --continue-on-error --full-report"

  [tool.poe.tasks.test]
  help = "Test this app"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage html"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage xml"
